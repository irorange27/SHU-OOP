#include <iostream>
#include <stdexcept>
#include <cstring>
class MyString {
private:
    char* str;
public:
    // 构造函数
    MyString(const char* s = "") {
        if (s) {
            str = new char[strlen(s) + 1];
            strcpy(str, s);
        } else {
            str = new char[1];
            *str = '\0';
        }
    }

    // 析构函数
    ~MyString() {
        delete[] str;
    }

    // 赋值运算符重载
    MyString& operator=(const MyString& s) {
        if (this != &s) {
            delete[] str;
            str = new char[strlen(s.str) + 1];
            strcpy(str, s.str);
        }
        return *this;
    }

    // length函数
    int length() const {
        return strlen(str);
    }

    // c_str函数
    const char* c_str() const {
        return str;
    }

    // 重载运算符
    MyString operator+(const MyString& s) const {
        MyString res;
        res.str = new char[strlen(str) + strlen(s.str) + 1];
        strcpy(res.str, str);
        strcat(res.str, s.str);
        return res;
    }

    MyString& operator+=(const MyString& s) {
        char* newStr = new char[strlen(str) + strlen(s.str) + 1];
        strcpy(newStr, str);
        strcat(newStr, s.str);
        delete[] str;
        str = newStr;
        return *this;
    }

    // 重载小于运算符
    bool operator<(const MyString& s) const {
        return strcmp(str, s.str) < 0;
    }

    // 重载大于运算符
    bool operator>(const MyString& s) const {
        return strcmp(str, s.str) > 0;
    }

    // 重载等于运算符
    bool operator==(const MyString& s) const {
        return strcmp(str, s.str) == 0;
    }

    // 重载不等于运算符
    bool operator!=(const MyString& s) const {
        return strcmp(str, s.str) != 0;
    }

    // 重载下标运算符
    char operator[](int index) const {
        if (index < 0 || index >= length()) {
            throw std::out_of_range("Index out of range");
        }
        return str[index];
    }
};

int main() {
    MyString s1("Hello");
    MyString s2("World");
    MyString s3 = s1 + s2;
    std::cout << s3.c_str() << std::endl;
    return 0;
}